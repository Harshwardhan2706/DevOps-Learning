>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Data Type  >>>>>>>>>>>>>>>>>>>>>>>>>>>

  1. **Numeric Data Types:**
     - **int**: Represents integers (whole numbers). Example: `x = 5`
     - **float**: Represents floating-point numbers (numbers with decimal points). Example: `y = 3.14`
     - **complex**: Represents complex numbers. Example: `z = 2 + 3j`
  
  2. **Sequence Types:**
     - **str**: Represents strings (sequences of characters). Example: `text = "Hello, World"`
     - **list**: Represents lists (ordered, mutable sequences). Example: `my_list = [1, 2, 3]`
     - **tuple**: Represents tuples (ordered, immutable sequences). Example: `my_tuple = (1, 2, 3)`
  
  3. **Mapping Type:**
     - **dict**: Represents dictionaries (key-value pairs). Example: `my_dict = {'name': 'John', 'age': 30}`
  
  4. **Set Types:**
     - **set**: Represents sets (unordered collections of unique elements). Example: `my_set = {1, 2, 3}`
     - **frozenset**: Represents immutable sets. Example: `my_frozenset = frozenset([1, 2, 3])`
  
  5. **Boolean Type:**
     - **bool**: Represents Boolean values (`True` or `False`). Example: `is_valid = True`
  
  6. **Binary Types:**
     - **bytes**: Represents immutable sequences of bytes. Example: `data = b'Hello'`
     - **bytearray**: Represents mutable sequences of bytes. Example: `data = bytearray(b'Hello')`
  
  7. **None Type:**
     - **NoneType**: Represents the `None` object, which is used to indicate the absence of a value or a null value.
  
  8. **Custom Data Types:**
     - You can also define your custom data types using classes and objects.

>>>>>>>>>>>>>>>>>>>>>>>>>>>  String   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  **1. String Data Type in Python:**
  
  - In Python, a string is a sequence of characters, enclosed within single (' '), double (" "), or triple (''' ''' or """ """) quotes.
  - Strings are immutable, meaning you cannot change the characters within a string directly. Instead, you create new strings.
  - You can access individual characters in a string using indexing, e.g., `my_string[0]` will give you the first character.
  - Strings support various built-in methods, such as `len()`, `upper()`, `lower()`, `strip()`, `replace()`, and more, for manipulation.
  
  **2. String Manipulation and Formatting:**
  
  - Concatenation: You can combine strings using the `+` operator.
  - Substrings: Use slicing to extract portions of a string, e.g., `my_string[2:5]` will extract characters from the 2nd to the 4th position.
  - String interpolation: Python supports various ways to format strings, including f-strings (f"...{variable}..."), %-formatting ("%s %d" % ("string", 42)), and `str.format()`.
  - Escape sequences: Special characters like newline (\n), tab (\t), and others are represented using escape sequences.
  - String methods: Python provides many built-in methods for string manipulation, such as `split()`, `join()`, and `startswith()`.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Numeric  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  **1. Numeric Data Types in Python (int, float):**
  
  - Python supports two primary numeric data types: `int` for integers and `float` for floating-point numbers.
  - Integers are whole numbers, and floats can represent both whole and fractional numbers.
  - You can perform arithmetic operations on these types, including addition, subtraction, multiplication, division, and more.
  - Be aware of potential issues with floating-point precision, which can lead to small inaccuracies in calculations.
  - Python also provides built-in functions for mathematical operations, such as `abs()`, `round()`, and `math` module for advanced functions.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  regex   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  **1. Regular Expressions for Text Processing:**
  
  - Regular expressions (regex or regexp) are a powerful tool for pattern matching and text processing.
  - The `re` module in Python is used for working with regular expressions.
  - Common metacharacters: `.` (any character), `*` (zero or more), `+` (one or more), `?` (zero or one), `[]` (character class), `|` (OR), `^` (start of a line), `$` (end of a line), etc.
  - Examples of regex usage: matching emails, phone numbers, or extracting data from text.
  - `re` module functions include `re.match()`, `re.search()`, `re.findall()`, and `re.sub()` for pattern matching and replacement.
