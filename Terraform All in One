>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Introduction  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      Terraform configuration language is Declarative

      To deploy infrastructure with Terraform:
            Scope - Identify the infrastructure for your project.
            Author - Write the configuration for your infrastructure.
            Initialize - Install the plugins Terraform needs to manage the infrastructure.
            Plan - Preview the changes Terraform will make to match your configuration.
            Apply - Make the planned changes.

      State File: Terraform keeps track of your real infrastructure in a state file

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Terraform Provider   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      If Version of cloud Provide and random provider is already specified in ***lock.hcl*** file then 
      terraform will not install the version more than that:

                              required_providers {
                                  random = {
                                    source  = "hashicorp/random"
                                    version = "3.1.0"
                                  }

                                  aws = {
                                    source  = "hashicorp/aws"
                                    version = ">= 4.5.0"
                                  }
                                    required_version = ">= 1.2.0"
                                }                              

      If Terraform did not find a lock file, it would download the latest versions of the providers that fulfill 
      the version constraints you defined in the required_providers block. 
      The following table shows which provider Terraform would download in this scenario, 
      based on the version constraint and presence of a lock file.
            Provider	Version Constraint   terraform init (no lock file)	terraform init (lock file)
            aws	      >= 2.0.0	          Latest version (e.g. 4.45.0)	Lock file version (2.50.0)
            random	3.1.0	                3.1.0	                        Lock file version (3.1.0)
      The lock file instructs Terraform to always install the same provider version, 
      ensuring that consistent runs across your team or remote sessions.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  Resource Block  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Resource blocks have two strings before the block: the resource type and the resource name:

            resource "aws_instance" "app_server" {
              ami           = "ami-830c94e3"
              instance_type = "t2.micro"
      
              tags = {
                Name = "ExampleAppServerInstance"
              }
            }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  terraform init  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Initializing a configuration directory downloads and installs the providers defined in the configuration

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform fmt   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      The terraform fmt command automatically updates configurations in the current directory for readability 
      and consistency.
      Format your configuration. Terraform will print out the names of the files it modified, if any.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform validate   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      You can also make sure your configuration is syntactically valid and internally consistent by using 
      the terraform validate command.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> terraform plan   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Reads the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date.
      Compares the current configuration to the prior state and noting any differences.
      Proposes a set of change actions that should, if applied, make the remote objects match the configuration.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform apply    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Create Infrstructure 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform.tfstate    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      When you applied your configuration, Terraform wrote data into a file called terraform.tfstate. 
      Terraform stores the IDs and properties of the resources it manages in this file, so that it can update 
      or destroy those resources going forward.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform show    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Inspect the current state using terraform show

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   terraform state list    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Terraform has a built-in command called terraform state for advanced state management. 
      Use the list subcommand to list of the resources in your project's state.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> terraform destroy   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      The terraform destroy command terminates resources managed by your Terraform project. 
      This command is the inverse of terraform apply in that it terminates all the resources specified 
      in your Terraform state. 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Remote State    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      Keep this terraform folder and files in remote location (Terraform Cloud) so it can be secured, 
      version controlled and can be accessible by different people within your team and organisation.

      How to migrate your state to remote:

      First add this block inside terraform block in your .tf file

            cloud {
                organization = "organization-name"
                workspaces {
                  name = "learn-tfc-aws"
                }
              }

      put your org. name and desired workspace name.
      then Run **terraform login** --- to login to terraform cloud where you get your Token that 
      will be use to After Applying **terraform init** to migrate your state file to terraform cloud.

      Later you can plan apply and destroy it will make affect on remote state file in terra cloud.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Terraform Variable   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

            variable "vpc_cidr_block" {
              description = "CIDR block for VPC"
              type        = string
              default     = "10.0.0.0/16"
            }

            in main.tf file   """  cidr = var.vpc_cidr_block   """
      Variable blocks have three optional arguments.

            Description: A short description to document the purpose of the variable.
            Type: The type of data contained in the variable.
            Default: The default value.


      We recommend setting a description and type for all variables, and setting a default value when practical.

      If you do not set a default value for a variable, you must assign a value before Terraform can apply the 
      configuration. Terraform does not support unassigned variables. You will review some of the ways to 
      assign values to variables later in this tutorial.

      Variable values must be literal values, and cannot use computed values like resource attributes, 
      expressions, or other variables. You can refer to variables in your configuration with 
      ***var.<variable_name>***.
      

      The variables you have used so far have all been single values. Terraform calls these types of variables simple. 
      Terraform also supports collection variable types that contain more than one value. Terraform supports 
      several collection variable types.

            List: A sequence of values of the same type.
            Map: A lookup table, matching keys to values, all of the same type.
            Set: An unordered collection of unique values, all of the same type.

                    variable "public_subnet_cidr_blocks" {
                    description = "Available cidr blocks for public subnets."
                    type        = list(string)
                    default     = [
                      "10.0.1.0/24",
                      "10.0.2.0/24",
                      "10.0.3.0/24",
                      "10.0.4.0/24",
                      "10.0.5.0/24",
                      "10.0.6.0/24",
                      "10.0.7.0/24",
                      "10.0.8.0/24",
                    ]
                  }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Terraform console   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      The Terraform console command opens an interactive console that you can use to evaluate expressions in the 
      context of your configuration

      The ***slice()*** function takes three arguments: the list to slice, the start index, and the end index 
      (exclusive). It returns a new list with the specified elements copied ("sliced") from the original list.

            private_subnets = slice(var.private_subnet_cidr_blocks, 0, var.private_subnet_count)
            public_subnets  = slice(var.public_subnet_cidr_blocks, 0, var.public_subnet_count)
